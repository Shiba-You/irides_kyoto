def _multiple_checker(c_f, c_s, feature_A_M, feature_A_W, feature_B_M, feature_B_W, c_f_a_ave, c_f_b_ave, c_s_a_ave, c_s_b_ave):
  for component, a_ave, b_ave in [[c_f, c_f_a_ave, c_f_b_ave], [c_s, c_s_a_ave, c_s_b_ave]]:
    upper_zero_M  = len(feature_A_M.query(f"{component} > 0")) + len(feature_B_M.query(f"{component} > 0"))
    lower_zero_M  = len(feature_A_M.query(f"{component} < 0")) + len(feature_B_M.query(f"{component} < 0"))
    upper_meanA_M = len(feature_A_M.query(f"{component} > {a_ave}"))
    lower_meanA_M = len(feature_A_M.query(f"{component} < {a_ave}"))
    upper_meanB_M = len(feature_B_M.query(f"{component} > {b_ave}"))
    lower_meanB_M = len(feature_B_M.query(f"{component} < {b_ave}"))
    upper_zero_W  = len(feature_A_W.query(f"{component} > 0")) + len(feature_B_W.query(f"{component} > 0"))
    lower_zero_W  = len(feature_A_W.query(f"{component} < 0")) + len(feature_B_W.query(f"{component} < 0"))
    upper_meanA_W = len(feature_A_W.query(f"{component} > {a_ave}"))
    lower_meanA_W = len(feature_A_W.query(f"{component} < {a_ave}"))
    upper_meanB_W = len(feature_B_W.query(f"{component} > {b_ave}"))
    lower_meanB_W = len(feature_B_W.query(f"{component} < {b_ave}"))
    print("=========================================")
    print(f"c_f: {c_f}, c_s: {c_s} ---- {component}")
    print(f"M -- {c_f}>0      :{upper_zero_M}, {c_f}<0      :{lower_zero_M} ")
    print(f"M -- {c_f}>A_mean :{upper_meanA_M}, {c_f}<A_mean :{lower_meanA_M}")
    print(f"M -- {c_f}>B_mean :{upper_meanB_M}, {c_f}<B_mean :{lower_meanB_M}")
    print(f"W -- {c_f}>0      :{upper_zero_W}, {c_f}<0      :{lower_zero_W} ")
    print(f"W -- {c_f}>A_mean :{upper_meanA_W}, {c_f}<A_mean :{lower_meanA_W}")
    print(f"W -- {c_f}>B_mean :{upper_meanB_W}, {c_f}<B_mean :{lower_meanB_W}")

def _checker(component, feature_A_M, feature_A_W, feature_B_M, feature_B_W, a_ave, b_ave):
  upper_zero_M  = len(feature_A_M.query(f"{component} > 0")) + len(feature_B_M.query(f"{component} > 0"))
  lower_zero_M  = len(feature_A_M.query(f"{component} < 0")) + len(feature_B_M.query(f"{component} < 0"))
  upper_meanA_M = len(feature_A_M.query(f"{component} > {a_ave}"))
  lower_meanA_M = len(feature_A_M.query(f"{component} < {a_ave}"))
  upper_meanB_M = len(feature_B_M.query(f"{component} > {b_ave}"))
  lower_meanB_M = len(feature_B_M.query(f"{component} < {b_ave}"))
  upper_zero_W  = len(feature_A_W.query(f"{component} > 0")) + len(feature_B_W.query(f"{component} > 0"))
  lower_zero_W  = len(feature_A_W.query(f"{component} < 0")) + len(feature_B_W.query(f"{component} < 0"))
  upper_meanA_W = len(feature_A_W.query(f"{component} > {a_ave}"))
  lower_meanA_W = len(feature_A_W.query(f"{component} < {a_ave}"))
  upper_meanB_W = len(feature_B_W.query(f"{component} > {b_ave}"))
  lower_meanB_W = len(feature_B_W.query(f"{component} < {b_ave}"))
  print("=========================================")
  print(f"component: {component}")
  print(f"M -- {component}>0      :{upper_zero_M}, {component}<0      :{lower_zero_M} ")
  print(f"M -- {component}>A_mean :{upper_meanA_M}, {component}<A_mean :{lower_meanA_M}")
  print(f"M -- {component}>B_mean :{upper_meanB_M}, {component}<B_mean :{lower_meanB_M}")
  print(f"W -- {component}>0      :{upper_zero_W}, {component}<0      :{lower_zero_W} ")
  print(f"W -- {component}>A_mean :{upper_meanA_W}, {component}<A_mean :{lower_meanA_W}")
  print(f"W -- {component}>B_mean :{upper_meanB_W}, {component}<B_mean :{lower_meanB_W}")

def output_check(target_features_df, target_components_columns):
  for component in target_components_columns:
    df_c = target_features_df[["group", "gender", component]]
    feature_A = df_c.query('group == "A"')
    feature_A_M = feature_A.query('gender == "男"')
    feature_A_W = feature_A.query('gender == "女"')
    feature_B = df_c.query('group == "B"')
    feature_B_M = feature_B.query('gender == "男"')
    feature_B_W = feature_B.query('gender == "女"')
    _, _, component_a_ave, component_b_ave, _ = df_c[component].max(), df_c[component].min(), feature_A[component].mean(), feature_B[component].mean(), (df_c[component].max() - df_c[component].min())/100*5
    _checker(component, feature_A_M, feature_A_W, feature_B_M, feature_B_W, component_a_ave, component_b_ave)